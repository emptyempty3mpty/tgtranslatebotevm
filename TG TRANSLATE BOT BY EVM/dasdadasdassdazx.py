import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from deep_translator import GoogleTranslator
from dotenv import load_dotenv
import openpyxl
import os


load_dotenv(dotenv_path='token.env')

API_TOKEN = os.getenv('API_TOKEN')

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
user_texts = {}

# –∫–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
global_keyboard = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text='/help'), types.KeyboardButton(text='/suggestions')]
    ],
    resize_keyboard=True
)


# –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
def get_language_keyboard():
    buttons = [
        [types.InlineKeyboardButton(text="\U0001f1ec\U0001f1e7–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", callback_data="lang_en")],
        [types.InlineKeyboardButton(text="\U0001f1f7\U0001f1fa–†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
        [types.InlineKeyboardButton(text="\U0001f1e9\U0001f1ea–ù–µ–º–µ—Ü–∫–∏–π", callback_data="lang_de")],
        [types.InlineKeyboardButton(text="\U0001f1ea\U0001f1f8–ò—Å–ø–∞–Ω—Å–∫–∏–π", callback_data="lang_es")]
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)


# start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "\U0001f91d–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–¥–µ–Ω–∏–π –æ –Ω–∞—à–µ–º –±–æ—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É /help.",
        reply_markup=global_keyboard
    )


# –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
@dp.message(Command("suggestions"))
async def cmd_suggestions(message: types.Message):
    await message.answer(
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ—è–≤–∏–ª–æ—Å—å –∫–∞–∫–æ–µ-–ª–∏–±–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @SEWERO8",
        reply_markup=global_keyboard
    )


# help
@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = (
        "üëã–ü—Ä–∏–≤–µ—Ç\n–≠—Ç–æ—Ç –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∏—Ç–æ–≥–æ–≤—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ –≠–í–ú. –†–∞–±–æ—Ç–∞–ª–∏ –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º:\n"
        "–ß—É–¥–∏–Ω –°—Ç–∞–Ω–∏—Å–ª–∞–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á, –ò–≤–∞–Ω–æ–≤ –ú–∞–∫—Å–∏–º –ò–≥–æ—Ä–µ–≤–∏—á, –ì–∞–ª–µ–Ω—Å–∫–∏–π –ê—Ä–∫–∞–¥–∏–π –û–ª–µ–≥–æ–≤–∏—á.\n"
        "–ü–µ—Ä–µ–≤–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —á–µ—Ç—ã—Ä–µ—Ö —è–∑—ã–∫–∞—Ö - –ê–Ω–≥–ª–∏–π—Å–∫–∏–π, –†—É—Å—Å–∫–∏–π, –ù–µ–º–µ—Ü–∫–∏–π –∏ –ò—Å–ø–∞–Ω—Å–∫–∏–π.\n"
        "–ß—Ç–æ–±—ã –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n"
        "1\uFE0F\u20E3–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏.\n"
        "2\uFE0F\u20E3–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —è–∑—ã–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞ - /suggestions"
    )
    await message.answer(help_text, reply_markup=global_keyboard)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
@dp.message()
async def handle_text(message: types.Message):
    if message.text.startswith('/'):
        return

    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_texts[message.chat.id] = message.text

    await message.answer(
        "–í—ã–±–µ—Ä–∏ —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:",
        reply_markup=get_language_keyboard()
    )


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@dp.callback_query(lambda c: c.data.startswith("lang_"))
async def process_language(callback: types.CallbackQuery):
    lang = callback.data.split("_")[1]
    user_id = callback.from_user.id

    # –±–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    text_to_translate = user_texts.get(user_id)

    if not text_to_translate:
        await callback.answer("–¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    try:
        translated = GoogleTranslator(source='auto', target=lang).translate(text_to_translate)
        await callback.message.edit_text(f"–ü–µ—Ä–µ–≤–æ–¥: {translated}")
        save_to_excel(user_id, translated, text_to_translate)
    except Exception as e:
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ")
    finally:
        # –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        user_texts.pop(user_id, None)


# —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Excel
def save_to_excel(user_id, translated, text_to_translate):
    try:
        wb = openpyxl.load_workbook('BD.xlsx')
    except FileNotFoundError:
        wb = openpyxl.Workbook()

    sheet = wb.active
    next_row = sheet.max_row + 1

    sheet.cell(row=next_row, column=1, value=user_id)
    sheet.cell(row=next_row, column=2, value=translated)
    sheet.cell(row=next_row, column=3, value=text_to_translate)

    wb.save('BD.xlsx')


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())